{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getRandomNumber","Math","floor","random","App","useState","value","setValue","usersFullName","setUsersFullName","fetchUsers","a","fetch","response","ok","json","num1","num2","arr","filter","item","id","arrayFullName","map","name","username","alert","status","console","log","className","onClick","i","type","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,YCITA,EAAkB,WACtB,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAiE3BC,MA9Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAU,uCAAG,sCAAAC,EAAA,sEACIC,MAAM,8CADV,YACbC,EADa,QAEJC,GAFI,iCAGED,EAASE,OAHX,OAGXA,EAHW,OAITC,EAAOhB,IACTiB,EAAOjB,IACPgB,GAAQC,IAAMA,EAAOjB,KACnBkB,EAAMH,EAAKI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,IAAML,GAAQI,EAAKC,IAAMJ,KACxDK,EAAgBJ,EAAIK,KAAI,SAAAH,GAC5B,MAAM,GAAN,OAAUA,EAAKI,KAAf,YAAuBJ,EAAKK,aAE9BhB,EAAiBa,GAXF,wBAafI,MAAM,8CAAkBb,EAASc,QAblB,4CAAH,qDAiBhB,OADAC,QAAQC,IAAIrB,GAEV,sBAAKsB,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wGACA,qBAAKA,UAAU,YAEjB,sBAAKA,UAAU,UAAf,UACE,yMACA,mBAAGA,UAAU,OAAb,SACE,sBAAMA,UAAU,aAAhB,stBAMJ,sBAAKA,UAAU,UAAf,UACE,wLACA,wBAAQA,UAAU,MAAMC,QAASrB,EAAjC,mJACA,qBAAKoB,UAAU,QAAf,SAEItB,EAAce,KAAI,SAACH,EAAMY,GACvB,OAAO,8BAAW,iCAAOA,EAAI,EAAX,QAAuBZ,IAA1BY,QAIrB,sBAAKF,UAAU,UAAf,UACE,+HACA,sBAAMA,UAAU,IAAhB,SACE,uBAAOA,UAAU,QACfG,KAAK,OACLC,YAAY,QACZ5B,MAAOA,EACP6B,SAAU,SAACC,GAAD,OAAO7B,EAAS6B,EAAEC,OAAO/B,sBCjDlCgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c334f4ae.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\nconst getRandomNumber = () => {\n  return Math.floor(Math.random() * 10) + 1\n}\n\nfunction App() {\n  const [value, setValue] = useState(\"\");\n  const [usersFullName, setUsersFullName] = useState([])\n\n  const fetchUsers = async () => {\n    let response = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n    if (response.ok) {\n      let json = await response.json();\n      const num1 = getRandomNumber();\n      let num2 = getRandomNumber();\n      if (num1 == num2) num2 = getRandomNumber()\n      const arr = json.filter(item => item.id != num1 && item.id != num2);\n      const arrayFullName = arr.map(item => {\n        return `${item.name} ${item.username}`\n      })\n      setUsersFullName(arrayFullName)\n    } else {\n      alert(\"Ошибка HTTP: \" + response.status);\n    }\n  }\n  console.log(usersFullName);\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <h1>1. Лого яндекса</h1>\n        <div className=\"logo\"></div>\n      </div>\n      <div className=\"wrapper\">\n        <h1>2. Анимация подчеркивания текста</h1>\n        <p className=\"text\">\n          <span className=\"text__anim\">\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloribus provident quisquam quae, amet eos at iusto numquam aliquam ratione temporibus reiciendis dolores corrupti ea omnis nihil laudantium pariatur. Doloribus, reprehenderit?\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloribus provident quisquam quae, amet eos at iusto numquam aliquam ratione temporibus reiciendis dolores corrupti ea omnis nihil laudantium pariatur. Doloribus, reprehenderit?\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloribus provident quisquam quae, amet eos at iusto numquam aliquam ratione temporibus reiciendis dolores corrupti ea omnis nihil laudantium pariatur. Doloribus, reprehenderit?</span>\n        </p>\n      </div>\n      <div className=\"wrapper\">\n        <h1>3. Get - запрос, фильтрация массива</h1>\n        <button className=\"btn\" onClick={fetchUsers}>Загрузить пользователей</button>\n        <div className=\"users\">\n          {\n            usersFullName.map((item, i) => {\n              return <p key={i}><span>{i + 1} -</span>{item}</p>\n            })\n          }\n        </div>\n        <div className=\"wrapper\">\n          <h1>4. Контролируемый input</h1>\n          <form className=\"o\">\n            <input className=\"input\"\n              type=\"text\"\n              placeholder=\"Lorem\"\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n            />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}